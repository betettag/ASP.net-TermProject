// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TermProject.Repositories;

namespace TermProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20191208043143_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TermProject.Models.Card", b =>
                {
                    b.Property<int>("CardID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DuelID");

                    b.Property<bool>("IsPrompt");

                    b.Property<int>("PlayedCount");

                    b.Property<string>("Text");

                    b.HasKey("CardID");

                    b.HasIndex("DuelID");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("TermProject.Models.Duel", b =>
                {
                    b.Property<int>("DuelID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PromptID");

                    b.Property<int>("TournamentID");

                    b.HasKey("DuelID");

                    b.HasIndex("PromptID");

                    b.HasIndex("TournamentID");

                    b.ToTable("Duels");
                });

            modelBuilder.Entity("TermProject.Models.Player", b =>
                {
                    b.Property<int>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CardID");

                    b.Property<int?>("DuelID");

                    b.Property<bool>("IsDueling");

                    b.Property<string>("Password");

                    b.Property<int>("Score");

                    b.Property<string>("Username");

                    b.Property<bool>("Voted");

                    b.Property<int>("Votes");

                    b.HasKey("PlayerID");

                    b.HasIndex("DuelID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TermProject.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlayerCount");

                    b.Property<int>("VoteCount");

                    b.HasKey("TournamentID");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("TermProject.Models.Card", b =>
                {
                    b.HasOne("TermProject.Models.Duel")
                        .WithMany("Cards")
                        .HasForeignKey("DuelID");
                });

            modelBuilder.Entity("TermProject.Models.Duel", b =>
                {
                    b.HasOne("TermProject.Models.Card", "Prompt")
                        .WithMany()
                        .HasForeignKey("PromptID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TermProject.Models.Tournament")
                        .WithMany("Duels")
                        .HasForeignKey("TournamentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TermProject.Models.Player", b =>
                {
                    b.HasOne("TermProject.Models.Duel")
                        .WithMany("Players")
                        .HasForeignKey("DuelID");
                });
#pragma warning restore 612, 618
        }
    }
}
